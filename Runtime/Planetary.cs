// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: planetary.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Planetary {

  /// <summary>Holder for reflection information generated from planetary.proto</summary>
  public static partial class PlanetaryReflection {

    #region Descriptor
    /// <summary>File descriptor for planetary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlanetaryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wbGFuZXRhcnkucHJvdG8SCXBsYW5ldGFyeSIoCgRJbml0Eg4KBkdhbWVJ",
            "RBgBIAEoBBIQCghQbGF5ZXJJRBgCIAEoCSI+Cg1XcmFwcGVkUGFja2V0Eg4K",
            "BlBhY2tldBgBIAEoDBIdCgRJbml0GAIgASgLMg8ucGxhbmV0YXJ5LkluaXQi",
            "KwoIUG9zaXRpb24SCQoBWBgBIAEoARIJCgFZGAIgASgBEgkKAVoYAyABKAEi",
            "XQoMVXBkYXRlRW50aXR5EhAKCEVudGl0eUlEGAEgASgJEgkKAVgYAiABKAES",
            "CQoBWRgDIAEoARIJCgFaGAQgASgBEgwKBERhdGEYBSABKAkSDAoEVHlwZRgG",
            "IAEoCSIgCgxEZWxldGVFbnRpdHkSEAoIRW50aXR5SUQYASABKAkiPQoLQ2h1",
            "bmtVcGRhdGUSCgoCSUQYASABKAQSDAoERGF0YRgCIAEoCRIJCgFYGAMgASgD",
            "EgkKAVkYBCABKAMi+gEKBlBhY2tldBIhCgRKb2luGAEgASgLMhMucGxhbmV0",
            "YXJ5LlBvc2l0aW9uEicKBlVwZGF0ZRgCIAEoCzIXLnBsYW5ldGFyeS5VcGRh",
            "dGVFbnRpdHkSJwoGRGVsZXRlGAMgASgLMhcucGxhbmV0YXJ5LkRlbGV0ZUVu",
            "dGl0eRINCgVMZWF2ZRgEIAEoCBIRCglBcmJpdHJhcnkYBSABKAkSDQoFRXZl",
            "bnQYBiABKAkSJQoFQ2h1bmsYByABKAsyFi5wbGFuZXRhcnkuQ2h1bmtVcGRh",
            "dGUSIwoHTWVzc2FnZRgIIAEoCzISLnBsYW5ldGFyeS5NZXNzYWdlIisKB01l",
            "c3NhZ2USEgoKVGFyZ2V0VVVJRBgBIAEoCRIMCgREYXRhGAIgASgJIlUKBUxv",
            "Z2luEg0KBVRva2VuGAEgASgJEg4KBkdhbWVJRBgCIAEoBBIMCgRVVUlEGAMg",
            "ASgJEg0KBUVtYWlsGAQgASgJEhAKCFBhc3N3b3JkGAUgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.Init), global::Planetary.Init.Parser, new[]{ "GameID", "PlayerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.WrappedPacket), global::Planetary.WrappedPacket.Parser, new[]{ "Packet", "Init" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.Position), global::Planetary.Position.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.UpdateEntity), global::Planetary.UpdateEntity.Parser, new[]{ "EntityID", "X", "Y", "Z", "Data", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.DeleteEntity), global::Planetary.DeleteEntity.Parser, new[]{ "EntityID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.ChunkUpdate), global::Planetary.ChunkUpdate.Parser, new[]{ "ID", "Data", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.Packet), global::Planetary.Packet.Parser, new[]{ "Join", "Update", "Delete", "Leave", "Arbitrary", "Event", "Chunk", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.Message), global::Planetary.Message.Parser, new[]{ "TargetUUID", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Planetary.Login), global::Planetary.Login.Parser, new[]{ "Token", "GameID", "UUID", "Email", "Password" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Init : pb::IMessage<Init> {
    private static readonly pb::MessageParser<Init> _parser = new pb::MessageParser<Init>(() => new Init());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Init> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Init() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Init(Init other) : this() {
      gameID_ = other.gameID_;
      playerID_ = other.playerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Init Clone() {
      return new Init(this);
    }

    /// <summary>Field number for the "GameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private ulong gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 2;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Init);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Init other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (PlayerID != other.PlayerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0UL) hash ^= GameID.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameID);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameID);
      }
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Init other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0UL) {
        GameID = other.GameID;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameID = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WrappedPacket : pb::IMessage<WrappedPacket> {
    private static readonly pb::MessageParser<WrappedPacket> _parser = new pb::MessageParser<WrappedPacket>(() => new WrappedPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WrappedPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrappedPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrappedPacket(WrappedPacket other) : this() {
      packet_ = other.packet_;
      init_ = other.init_ != null ? other.init_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WrappedPacket Clone() {
      return new WrappedPacket(this);
    }

    /// <summary>Field number for the "Packet" field.</summary>
    public const int PacketFieldNumber = 1;
    private pb::ByteString packet_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Packet {
      get { return packet_; }
      set {
        packet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Init" field.</summary>
    public const int InitFieldNumber = 2;
    private global::Planetary.Init init_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Planetary.Init Init {
      get { return init_; }
      set {
        init_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WrappedPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WrappedPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Packet != other.Packet) return false;
      if (!object.Equals(Init, other.Init)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Packet.Length != 0) hash ^= Packet.GetHashCode();
      if (init_ != null) hash ^= Init.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Packet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Packet);
      }
      if (init_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Init);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Packet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Packet);
      }
      if (init_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Init);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WrappedPacket other) {
      if (other == null) {
        return;
      }
      if (other.Packet.Length != 0) {
        Packet = other.Packet;
      }
      if (other.init_ != null) {
        if (init_ == null) {
          init_ = new global::Planetary.Init();
        }
        Init.MergeFrom(other.Init);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Packet = input.ReadBytes();
            break;
          }
          case 18: {
            if (init_ == null) {
              init_ = new global::Planetary.Init();
            }
            input.ReadMessage(init_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateEntity : pb::IMessage<UpdateEntity> {
    private static readonly pb::MessageParser<UpdateEntity> _parser = new pb::MessageParser<UpdateEntity>(() => new UpdateEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntity(UpdateEntity other) : this() {
      entityID_ = other.entityID_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      data_ = other.data_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntity Clone() {
      return new UpdateEntity(this);
    }

    /// <summary>Field number for the "EntityID" field.</summary>
    public const int EntityIDFieldNumber = 1;
    private string entityID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityID {
      get { return entityID_; }
      set {
        entityID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 2;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 3;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 4;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 5;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityID != other.EntityID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      if (Data != other.Data) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityID.Length != 0) hash ^= EntityID.GetHashCode();
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityID);
      }
      if (X != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Z);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Data);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityID);
      }
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateEntity other) {
      if (other == null) {
        return;
      }
      if (other.EntityID.Length != 0) {
        EntityID = other.EntityID;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EntityID = input.ReadString();
            break;
          }
          case 17: {
            X = input.ReadDouble();
            break;
          }
          case 25: {
            Y = input.ReadDouble();
            break;
          }
          case 33: {
            Z = input.ReadDouble();
            break;
          }
          case 42: {
            Data = input.ReadString();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteEntity : pb::IMessage<DeleteEntity> {
    private static readonly pb::MessageParser<DeleteEntity> _parser = new pb::MessageParser<DeleteEntity>(() => new DeleteEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntity(DeleteEntity other) : this() {
      entityID_ = other.entityID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntity Clone() {
      return new DeleteEntity(this);
    }

    /// <summary>Field number for the "EntityID" field.</summary>
    public const int EntityIDFieldNumber = 1;
    private string entityID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityID {
      get { return entityID_; }
      set {
        entityID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityID != other.EntityID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityID.Length != 0) hash ^= EntityID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteEntity other) {
      if (other == null) {
        return;
      }
      if (other.EntityID.Length != 0) {
        EntityID = other.EntityID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EntityID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChunkUpdate : pb::IMessage<ChunkUpdate> {
    private static readonly pb::MessageParser<ChunkUpdate> _parser = new pb::MessageParser<ChunkUpdate>(() => new ChunkUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkUpdate(ChunkUpdate other) : this() {
      iD_ = other.iD_;
      data_ = other.data_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkUpdate Clone() {
      return new ChunkUpdate(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 3;
    private long x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 4;
    private long y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Data != other.Data) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (X != 0L) hash ^= X.GetHashCode();
      if (Y != 0L) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (X != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(X);
      }
      if (Y != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (X != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(X);
      }
      if (Y != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.X != 0L) {
        X = other.X;
      }
      if (other.Y != 0L) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 24: {
            X = input.ReadInt64();
            break;
          }
          case 32: {
            Y = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      join_ = other.join_ != null ? other.join_.Clone() : null;
      update_ = other.update_ != null ? other.update_.Clone() : null;
      delete_ = other.delete_ != null ? other.delete_.Clone() : null;
      leave_ = other.leave_;
      arbitrary_ = other.arbitrary_;
      event_ = other.event_;
      chunk_ = other.chunk_ != null ? other.chunk_.Clone() : null;
      message_ = other.message_ != null ? other.message_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "Join" field.</summary>
    public const int JoinFieldNumber = 1;
    private global::Planetary.Position join_;
    /// <summary>
    /// client side to join at location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Planetary.Position Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "Update" field.</summary>
    public const int UpdateFieldNumber = 2;
    private global::Planetary.UpdateEntity update_;
    /// <summary>
    /// server side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Planetary.UpdateEntity Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    /// <summary>Field number for the "Delete" field.</summary>
    public const int DeleteFieldNumber = 3;
    private global::Planetary.DeleteEntity delete_;
    /// <summary>
    /// server side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Planetary.DeleteEntity Delete {
      get { return delete_; }
      set {
        delete_ = value;
      }
    }

    /// <summary>Field number for the "Leave" field.</summary>
    public const int LeaveFieldNumber = 4;
    private bool leave_;
    /// <summary>
    /// client side or server side (forces disconnect if sent serverside)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Leave {
      get { return leave_; }
      set {
        leave_ = value;
      }
    }

    /// <summary>Field number for the "Arbitrary" field.</summary>
    public const int ArbitraryFieldNumber = 5;
    private string arbitrary_ = "";
    /// <summary>
    /// client side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arbitrary {
      get { return arbitrary_; }
      set {
        arbitrary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Event" field.</summary>
    public const int EventFieldNumber = 6;
    private string event_ = "";
    /// <summary>
    /// server side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Event {
      get { return event_; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Chunk" field.</summary>
    public const int ChunkFieldNumber = 7;
    private global::Planetary.ChunkUpdate chunk_;
    /// <summary>
    /// server side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Planetary.ChunkUpdate Chunk {
      get { return chunk_; }
      set {
        chunk_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 8;
    private global::Planetary.Message message_;
    /// <summary>
    /// client side (replaces Arbitrary)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Planetary.Message Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Join, other.Join)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (Leave != other.Leave) return false;
      if (Arbitrary != other.Arbitrary) return false;
      if (Event != other.Event) return false;
      if (!object.Equals(Chunk, other.Chunk)) return false;
      if (!object.Equals(Message, other.Message)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (join_ != null) hash ^= Join.GetHashCode();
      if (update_ != null) hash ^= Update.GetHashCode();
      if (delete_ != null) hash ^= Delete.GetHashCode();
      if (Leave != false) hash ^= Leave.GetHashCode();
      if (Arbitrary.Length != 0) hash ^= Arbitrary.GetHashCode();
      if (Event.Length != 0) hash ^= Event.GetHashCode();
      if (chunk_ != null) hash ^= Chunk.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (join_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Join);
      }
      if (update_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Update);
      }
      if (delete_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Delete);
      }
      if (Leave != false) {
        output.WriteRawTag(32);
        output.WriteBool(Leave);
      }
      if (Arbitrary.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Arbitrary);
      }
      if (Event.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Event);
      }
      if (chunk_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Chunk);
      }
      if (message_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (join_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Join);
      }
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (delete_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      if (Leave != false) {
        size += 1 + 1;
      }
      if (Arbitrary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arbitrary);
      }
      if (Event.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
      }
      if (chunk_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chunk);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.join_ != null) {
        if (join_ == null) {
          join_ = new global::Planetary.Position();
        }
        Join.MergeFrom(other.Join);
      }
      if (other.update_ != null) {
        if (update_ == null) {
          update_ = new global::Planetary.UpdateEntity();
        }
        Update.MergeFrom(other.Update);
      }
      if (other.delete_ != null) {
        if (delete_ == null) {
          delete_ = new global::Planetary.DeleteEntity();
        }
        Delete.MergeFrom(other.Delete);
      }
      if (other.Leave != false) {
        Leave = other.Leave;
      }
      if (other.Arbitrary.Length != 0) {
        Arbitrary = other.Arbitrary;
      }
      if (other.Event.Length != 0) {
        Event = other.Event;
      }
      if (other.chunk_ != null) {
        if (chunk_ == null) {
          chunk_ = new global::Planetary.ChunkUpdate();
        }
        Chunk.MergeFrom(other.Chunk);
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::Planetary.Message();
        }
        Message.MergeFrom(other.Message);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (join_ == null) {
              join_ = new global::Planetary.Position();
            }
            input.ReadMessage(join_);
            break;
          }
          case 18: {
            if (update_ == null) {
              update_ = new global::Planetary.UpdateEntity();
            }
            input.ReadMessage(update_);
            break;
          }
          case 26: {
            if (delete_ == null) {
              delete_ = new global::Planetary.DeleteEntity();
            }
            input.ReadMessage(delete_);
            break;
          }
          case 32: {
            Leave = input.ReadBool();
            break;
          }
          case 42: {
            Arbitrary = input.ReadString();
            break;
          }
          case 50: {
            Event = input.ReadString();
            break;
          }
          case 58: {
            if (chunk_ == null) {
              chunk_ = new global::Planetary.ChunkUpdate();
            }
            input.ReadMessage(chunk_);
            break;
          }
          case 66: {
            if (message_ == null) {
              message_ = new global::Planetary.Message();
            }
            input.ReadMessage(message_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      targetUUID_ = other.targetUUID_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "TargetUUID" field.</summary>
    public const int TargetUUIDFieldNumber = 1;
    private string targetUUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUUID {
      get { return targetUUID_; }
      set {
        targetUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetUUID != other.TargetUUID) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetUUID.Length != 0) hash ^= TargetUUID.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetUUID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetUUID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetUUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUUID);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.TargetUUID.Length != 0) {
        TargetUUID = other.TargetUUID;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetUUID = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Login : pb::IMessage<Login> {
    private static readonly pb::MessageParser<Login> _parser = new pb::MessageParser<Login>(() => new Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Planetary.PlanetaryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login(Login other) : this() {
      token_ = other.token_;
      gameID_ = other.gameID_;
      uUID_ = other.uUID_;
      email_ = other.email_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login Clone() {
      return new Login(this);
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private ulong gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "UUID" field.</summary>
    public const int UUIDFieldNumber = 3;
    private string uUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UUID {
      get { return uUID_; }
      set {
        uUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    /// <summary>
    /// optionally use these instead of token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (GameID != other.GameID) return false;
      if (UUID != other.UUID) return false;
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (GameID != 0UL) hash ^= GameID.GetHashCode();
      if (UUID.Length != 0) hash ^= UUID.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (GameID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GameID);
      }
      if (UUID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UUID);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (GameID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameID);
      }
      if (UUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UUID);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.GameID != 0UL) {
        GameID = other.GameID;
      }
      if (other.UUID.Length != 0) {
        UUID = other.UUID;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            GameID = input.ReadUInt64();
            break;
          }
          case 26: {
            UUID = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
